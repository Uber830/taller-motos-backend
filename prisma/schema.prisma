generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  avatar          String?
  firstName       String
  habeas_data     Boolean   @default(false)
  lastName        String
  sessionFacebook Boolean   @default(false)
  sessionGoogle   Boolean   @default(false)
  dateOfBirth     DateTime? @default(now())
  phoneNumber     String?   @default("")
  ownedWorkshop   Workshop? @relation("WorkshopOwner")

  @@map("users")
}

model Workshop {
  id         String                 @id @default(cuid())
  name       String
  address    String
  phone      String
  email      String?
  logo       String?
  active     Boolean                @default(true)
  ownerId    String                 @unique
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  nit        String?
  customers  Customer[]
  services   Service[]
  supplies   Supply[]
  workOrders WorkOrder[]
  employees  WorkshopEmployeeInfo[] @relation("WorkshopInternalEmployees")
  owner      User                   @relation("WorkshopOwner", fields: [ownerId], references: [id])

  @@map("workshops")
}

model Customer {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  workshopId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  notes       String?
  workshop    Workshop     @relation(fields: [workshopId], references: [id])
  vehicles   Vehicle[]
  workOrders WorkOrder[]

  @@map("customers")
}

model Vehicle {
  id         String      @id @default(cuid())
  brand      String
  model      String
  year       Int
  plate      String
  color      String
  type       VehicleType @default(MOTORCYCLE)
  customerId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer    @relation(fields: [customerId], references: [id])
  workOrders WorkOrder[]

  @@map("vehicles")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  workshopId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workshop    Workshop @relation(fields: [workshopId], references: [id])
  workOrders  WorkOrder[]

  @@map("services")
}

model WorkOrder {
  id              String              @id @default(cuid())
  status          OrderStatus         @default(PENDING)
  priority        OrderPriority       @default(MEDIUM)
  workshopId      String
  customerId      String
  vehicleId       String
  serviceId       String
  mechanic        String              // nombre del mec√°nico asignado
  description     String
  additionalNotes String?
  total           Decimal
  startDate       DateTime            @default(now())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  invoice         Invoice?
  supplies        SupplyOnWorkOrder[]
  customer        Customer            @relation(fields: [customerId], references: [id])
  vehicle         Vehicle             @relation(fields: [vehicleId], references: [id])
  service         Service             @relation(fields: [serviceId], references: [id])
  workshop        Workshop            @relation(fields: [workshopId], references: [id])

  @@map("work_orders")
}

model Supply {
  id          String              @id @default(cuid())
  name        String
  description String?
  price       Decimal
  stock       Int                 @default(0)
  workshopId  String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  workshop    Workshop            @relation(fields: [workshopId], references: [id])
  workOrders  SupplyOnWorkOrder[]

  @@map("supplies")
}

model SupplyOnWorkOrder {
  id          String    @id @default(cuid())
  workOrderId String
  supplyId    String
  quantity    Int
  createdAt   DateTime  @default(now())
  supply      Supply    @relation(fields: [supplyId], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])

  @@map("supplies_on_work_orders")
}

model Invoice {
  id          String    @id @default(cuid())
  workOrderId String    @unique
  total       Decimal
  paid        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])

  @@map("invoices")
}

model WorkshopEmployeeInfo {
  id         String       @id @default(cuid())
  firstName  String
  lastName   String
  email      String?
  phone      String?
  role       EmployeeRole
  active     Boolean      @default(true)
  workshopId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  workshop   Workshop     @relation("WorkshopInternalEmployees", fields: [workshopId], references: [id])

  @@map("workshop_employee_info")
}

enum EmployeeRole {
  ADMIN
  MECHANIC
}

enum VehicleType {
  MOTORCYCLE
  CAR
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
